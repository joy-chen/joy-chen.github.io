<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Joy</title>
  <subtitle>abc</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://joyflyaway.com/"/>
  <updated>2017-03-10T03:15:41.000Z</updated>
  <id>http://joyflyaway.com/</id>
  
  <author>
    <name>Joy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>电源管理</title>
    <link href="http://joyflyaway.com/2017/03/10/%E7%94%B5%E6%BA%90%E7%AE%A1%E7%90%86/"/>
    <id>http://joyflyaway.com/2017/03/10/电源管理/</id>
    <published>2017-03-10T03:15:41.000Z</published>
    <updated>2017-03-10T03:15:41.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>查看内存信息</title>
    <link href="http://joyflyaway.com/2017/03/09/%E6%9F%A5%E7%9C%8B%E5%86%85%E5%AD%98%E4%BF%A1%E6%81%AF/"/>
    <id>http://joyflyaway.com/2017/03/09/查看内存信息/</id>
    <published>2017-03-09T05:28:15.000Z</published>
    <updated>2017-03-09T08:07:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>除了free与vmstat之外，透过调阅<strong>/proc/meminfo</strong>的内容可以查阅进一步的统计信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">cat /proc/meminfo</div><div class="line">MemTotal:     12142744 kB</div><div class="line">MemFree:      10889316 kB</div><div class="line">Buffers:        391964 kB</div><div class="line">Cached:         522584 kB</div><div class="line">SwapCached:          0 kB</div><div class="line">Active:         407604 kB</div><div class="line">Inactive:       564460 kB</div><div class="line">HighTotal:           0 kB</div><div class="line">HighFree:            0 kB</div><div class="line">LowTotal:     12142744 kB</div><div class="line">LowFree:      10889316 kB</div><div class="line">SwapTotal:    20972816 kB</div><div class="line">SwapFree:     20972816 kB</div><div class="line">Dirty:             304 kB</div><div class="line">Writeback:           0 kB</div><div class="line">AnonPages:       57388 kB</div><div class="line">Mapped:          23556 kB</div><div class="line">Slab:           214100 kB</div><div class="line">PageTables:       7328 kB</div><div class="line">NFS_Unstable:        0 kB</div><div class="line">Bounce:              0 kB</div><div class="line">CommitLimit:  27044188 kB</div><div class="line">Committed_AS:   372876 kB</div><div class="line">VmallocTotal: 34359738367 kB</div><div class="line">VmallocUsed:    281368 kB</div><div class="line">VmallocChunk: 34359456975 kB</div><div class="line">HugePages_Total:     0</div><div class="line">HugePages_Free:      0</div><div class="line">HugePages_Rsvd:      0M</div><div class="line">Hugepagesize:     2048 kB</div></pre></td></tr></table></figure></p>
<p>他的输出内容非常的多，但你可以分成几块来看：高阶、低阶的与內存统计信息。<br>高阶信息，基本上就等同于是在free看到的那些内容：<br>MemTotal是系统中可用的內存总量，但其实是扣掉了一些被kernel所保留的一点点空间。<br>MemFree是HighFree与LowFree的加总。<br>Buffers是buffer所占用的空间。<br>Cached是不包含SwapCached的cache空间。<br>比较低阶的信息有：<br>Active指的是那些最近或是经常被使用的page，而Inactive则是那些最近都没有被使用的page。当系统需要调用新的page空间时，会先从Inactive的部分下手，因为Active的部分比较有机会被再度使用。<br>HighTotal与HighFree代表的是user space所能使用的以及还剩馀多少的使用空间。<br>LowTotal与LowFree则是kernel space所能使用的以及还剩馀多少的使用空间。<br>SwapTotal与SwapFree指的是swap所能使用以及还剩馀多少空间。<br>Dirty指的是等待被写入disk的数据量。<br>Writeback则是正在被写入disk的数据量。<br>AnonPages为non-paged的空间。<br>Mapped为/dev设备所mapped的空间。<br>Slab是kernel所使用的buffer空间。<br>PageTables是page管理的index大小。<br>VmallocTotal是透过vmalloc（）可以调用的內存大小。<br>VmallocUsed是透过vmalloc（）所调用的內存大小。<br>VmallocChunk则是记录还剩多少连续的可调用的內存空间。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;除了free与vmstat之外，透过调阅&lt;strong&gt;/proc/meminfo&lt;/strong&gt;的内容可以查阅进一步的统计信息：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android便捷命令</title>
    <link href="http://joyflyaway.com/2017/03/07/Android%E4%BE%BF%E6%8D%B7%E5%91%BD%E4%BB%A4/"/>
    <id>http://joyflyaway.com/2017/03/07/Android便捷命令/</id>
    <published>2017-03-07T08:20:18.000Z</published>
    <updated>2017-03-09T08:07:47.000Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --></p>
<h2 id="pm"><a href="#pm" class="headerlink" title="pm"></a>pm</h2><p>  pm list package列出安装再设备上的应用：</p>
<ul>
<li>不带任何选项：列出所有的应用的包名：<br>pm list package</li>
<li>-s:列出系统应用<br>pm list package -s</li>
<li>-3:列出第三方应用<br>pm list package -3</li>
<li>-f:列出应用包名及对应的apk名及存放位置<br>pm list package -f</li>
<li>-i:列出应用包名及其安装来源<br>pm list package -i<br>例如：package:com.zhihu.android installer=com.xiaomi.market  </li>
<li>参数组合使用，例如查找三方应用中知乎的包名、apk存放位置、安装来源：<br>pm list package -f -3 -i zhihu<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">package:/data/app/com.zhihu.android-1.apk=com.zhihu.android  installer=com.xiaomi.market</div></pre></td></tr></table></figure>
</li>
</ul>
<p>pm path 列出对应包名的.apk位置：</p>
<ul>
<li>pm path com.tencent.mobileqq<br>package:/data/app/com.tencent.mobileqq-1.apk</li>
</ul>
<p>pm dump，后跟包名，列出指定应用的dump信息，里面有各种信息：</p>
<ul>
<li>pm dump com.tencent.mobileqq<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">Packages:</div><div class="line">Package [com.tencent.mobileqq] (4397f810):</div><div class="line">userId=10091 gids=[3003, 3002, 3001, 1028, 1015]</div><div class="line">pkg=Package&#123;43851660 com.tencent.mobileqq&#125;</div><div class="line">codePath=/data/app/com.tencent.mobileqq-1.apk</div><div class="line">resourcePath=/data/app/com.tencent.mobileqq-1.apk</div><div class="line">nativeLibraryPath=/data/app-lib/com.tencent.mobileqq-1</div><div class="line">versionCode=242 targetSdk=9</div><div class="line">versionName=5.6.0</div><div class="line">applicationInfo=ApplicationInfo&#123;43842cc8 com.tencent.mobileqq&#125;</div><div class="line">flags=[ HAS_CODE ALLOW_CLEAR_USER_DATA ]</div><div class="line">dataDir=/data/data/com.tencent.mobileqq</div><div class="line">supportsScreens=[small, medium, large, xlarge, resizeable, anyDensity]</div><div class="line">usesOptionalLibraries:</div><div class="line">com.google.android.media.effects</div><div class="line">com.motorola.hardware.frontcamera</div><div class="line">timeStamp=2015-05-13 14:04:24</div><div class="line">firstInstallTime=2015-04-03 20:50:07</div><div class="line">lastUpdateTime=2015-05-13 14:05:02</div><div class="line">installerPackageName=com.xiaomi.market</div><div class="line">signatures=PackageSignatures&#123;4397f8d8 [43980488]&#125;</div><div class="line">permissionsFixed=true haveGids=true installStatus=1</div><div class="line">pkgFlags=[ HAS_CODE ALLOW_CLEAR_USER_DATA ]</div><div class="line">User 0:  installed=true blocked=false stopped=false notLaunched=false enabled=0</div><div class="line">grantedPermissions:</div><div class="line">android.permission.CHANGE_WIFI_MULTICAST_STATE</div><div class="line">com.tencent.qav.permission.broadcast</div><div class="line">com.tencent.photos.permission.DATA</div><div class="line">com.tencent.wifisdk.permission.disconnect</div></pre></td></tr></table></figure>
</li>
</ul>
<p>pm install，安装应用。目标apk存放与PC端，用adb install安装。目标apk存放于Android设备上，用pm install安装             </p>
<p>pm uninstall，卸载应用，同adb uninstall,后面跟的参数都是应用的包名</p>
<p>pm clear，清除应用数据</p>
<h2 id="am"><a href="#am" class="headerlink" title="am"></a>am</h2><p>am start，启动一个Activity，以启动系统相机应用为例：   </p>
<ul>
<li>启动相机：<br>am start -n com.android.camera/.Camera</li>
<li>先停止目标应用，再启动：<br>am start -S com.android.camera/.Camera</li>
<li><p>等待应用完成启动：<br>am start -W com.android.camera/.Camera</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Starting: Intent &#123; act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER]                           cmp=com.android.camera/.Camera &#125;</div><div class="line">   Status: ok</div><div class="line">   Activity: com.android.camera/.Camera</div><div class="line">   ThisTime: 500</div><div class="line">   TotalTime: 500</div><div class="line">   Complete</div></pre></td></tr></table></figure>
</li>
<li><p>启动默认C页：<br>am start -a android.intent.action.VIEW -d <a href="http://testerhome.com" target="_blank" rel="external">http://testerhome.com</a></p>
</li>
<li>启动拨号器拨打10086<br>am start -a android.intent.action.CALL -d tel:10086</li>
<li>am monitor，监控crash与ANR</li>
<li>am force-stop，后跟包名，结束应用</li>
<li>am startsevice，启动一个服务</li>
<li>am broadcast，发送一个广播</li>
</ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Author JOY.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android名词释义</title>
    <link href="http://joyflyaway.com/2017/03/07/Android%E5%90%8D%E8%AF%8D%E9%87%8A%E4%B9%89/"/>
    <id>http://joyflyaway.com/2017/03/07/Android名词释义/</id>
    <published>2017-03-07T03:19:14.000Z</published>
    <updated>2017-03-09T08:07:49.000Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --></p>
<ul>
<li>provisioning(配置,服务开通)</li>
</ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Author JOY.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android双应用功能实现</title>
    <link href="http://joyflyaway.com/2017/03/02/Android%E5%8F%8C%E5%BA%94%E7%94%A8%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/"/>
    <id>http://joyflyaway.com/2017/03/02/Android双应用功能实现/</id>
    <published>2017-03-02T02:58:33.000Z</published>
    <updated>2017-03-02T02:58:33.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>linux常用命令</title>
    <link href="http://joyflyaway.com/2017/02/28/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://joyflyaway.com/2017/02/28/linux常用命令/</id>
    <published>2017-02-28T13:30:31.000Z</published>
    <updated>2017-03-03T01:07:16.000Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><br>目录下查找替换<br>sed -i “s/old/new/g” <code>grep old -rl /www</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Author JOY.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>shell命令</title>
    <link href="http://joyflyaway.com/2017/02/17/shell%E5%91%BD%E4%BB%A4/"/>
    <id>http://joyflyaway.com/2017/02/17/shell命令/</id>
    <published>2017-02-17T03:27:46.000Z</published>
    <updated>2017-02-17T03:28:17.000Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><br>列出你所有的僵尸进程:<br>ps -el | grep ‘Z</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Joy&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android资源查找</title>
    <link href="http://joyflyaway.com/2017/02/03/Android%E8%B5%84%E6%BA%90%E6%9F%A5%E6%89%BE/"/>
    <id>http://joyflyaway.com/2017/02/03/Android资源查找/</id>
    <published>2017-02-03T13:12:06.000Z</published>
    <updated>2017-02-16T09:40:45.000Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --></p>
<h2 id="Android-API-使用例子："><a href="#Android-API-使用例子：" class="headerlink" title="Android API 使用例子："></a>Android API 使用例子：</h2><p><a href="https://developer.android.com/samples/index.html" target="_blank" rel="external">https://developer.android.com/samples/index.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Joy&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>查看Android系统历史使用数据</title>
    <link href="http://joyflyaway.com/2017/02/03/%E6%9F%A5%E7%9C%8BAndroid%E7%B3%BB%E7%BB%9F%E5%8E%86%E5%8F%B2%E4%BD%BF%E7%94%A8%E6%95%B0%E6%8D%AE/"/>
    <id>http://joyflyaway.com/2017/02/03/查看Android系统历史使用数据/</id>
    <published>2017-02-03T12:31:20.000Z</published>
    <updated>2017-02-16T09:41:05.000Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --></p>
<h2 id="应用使用情况统计信息"><a href="#应用使用情况统计信息" class="headerlink" title="应用使用情况统计信息"></a>应用使用情况统计信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">现在可以利用新增的 android.app.usage API 访问 Android 设备上的应用使用历史记录。此 API 提供比已弃用的 getRecentTasks() 方法更为详细的使用信息。要使用此 API，您必须先在清单中声明 &quot;android.permission.PACKAGE_USAGE_STATS&quot; 权限。用户还必须通过 Settings &gt; Security &gt; Apps 为该应用启用访问使用情况的权限。</div><div class="line"></div><div class="line">系统以应用为单位收集使用数据，按天、周、月和年汇总数据。系统保留这些数据的最长持续时间如下：</div><div class="line"></div><div class="line">每日数据：7 天</div><div class="line">每周数据：4 周</div><div class="line">每月数据：6 个月</div><div class="line">每年数据：2 年</div><div class="line">系统会为每个应用记录以下数据：</div><div class="line"></div><div class="line">最后一次使用应用的时间</div><div class="line">在该时间间隔（以天、周、月或年为单位）内应用位于前台的总时长</div><div class="line">一天之中当组件（以软件包和 Activity 名称标识）转入前台或后台时记录的时间戳</div><div class="line">设备配置发生变化（如设备屏幕方向因旋转而发生变化）时记录的时间戳</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Joy&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>查看Android系统运行信息</title>
    <link href="http://joyflyaway.com/2017/01/30/%E6%9F%A5%E7%9C%8BAndroid%E7%B3%BB%E7%BB%9F%E8%BF%90%E8%A1%8C%E4%BF%A1%E6%81%AF/"/>
    <id>http://joyflyaway.com/2017/01/30/查看Android系统运行信息/</id>
    <published>2017-01-30T04:16:03.000Z</published>
    <updated>2017-02-17T03:28:20.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><p>service list</p>
<ul>
<li>whether exist in system service</li>
</ul>
</li>
<li><p>showmap -s [pid]</p>
<ul>
<li>Memory allocation dump</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;service list&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;whether exist in system service&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;showmap -s [pid]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Memory allocatio
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android Native Tombstone/Crash 分析</title>
    <link href="http://joyflyaway.com/2017/01/14/Android-Native-Tombstone-Crash-%E5%88%86%E6%9E%90/"/>
    <id>http://joyflyaway.com/2017/01/14/Android-Native-Tombstone-Crash-分析/</id>
    <published>2017-01-14T08:12:32.000Z</published>
    <updated>2017-01-30T04:17:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>APK运行异常时，会闪退，然后弹出对话框“xxx应用已停止运行。。。”，造成这种现象的原因有两种：</p>
<ul>
<li>发生了未捕获的异常</li>
<li>Native层运行异常</li>
</ul>
<p>Tombstone 是 Android 用来记录 native 进程崩溃的 core dump 日志</p>
<h2 id="Tombstone-文件格式"><a href="#Tombstone-文件格式" class="headerlink" title="Tombstone 文件格式"></a>Tombstone 文件格式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***</div><div class="line">Build fingerprint: &apos;LeEco/X7_CN/le_x7:6.0/KGXCNFN5961511291D/1480366802:userdebug/test-keys&apos;   </div><div class="line">Revision: &apos;0&apos;   </div><div class="line">ABI: &apos;arm64&apos;   </div><div class="line">pid: 2741, tid: 2832, name: L_UPDATE_ACTION  &gt;&gt;&gt; com.google.android.gms &lt;&lt;&lt;   </div><div class="line">    signal 11 (SIGSEGV), code 1 (SEGV_MAPERR), fault addr 0x0</div><div class="line">    x0   0000000000000000  x1   0000000000000000  x2   0000000000000006     </div><div class="line">    x3   000000000000736d  x4   0000000000000003  x5   0000007f6b9c8090   </div><div class="line"></div><div class="line">backtrace:</div><div class="line">    #00 pc 000000000001cff4  /system/lib64/libc.so (strlen+16)</div><div class="line">    #01 pc 0000000000012e24  /system/lib64/libutils.so (_ZN7android7String8C2EPKc+24)</div><div class="line">    #02 pc 0000000000116518  /system/lib64/libandroid_runtime.so</div><div class="line">    #03 pc 00000000029a5438  /data/dalvik-cache/arm64/system@framework@boot.oat (offset 0x2696000)</div><div class="line"></div><div class="line">stack:</div><div class="line">         0000007f78421b60  0000000000000000</div></pre></td></tr></table></figure>
<ul>
<li>编译信息</li>
<li>问题进程－问题线程－进程名－错误信号</li>
<li>寄存器的值</li>
<li>当前堆栈</li>
<li>历史堆栈</li>
</ul>
<h3 id="SIGSEGV"><a href="#SIGSEGV" class="headerlink" title="SIGSEGV"></a>SIGSEGV</h3><ul>
<li>越界访问</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;APK运行异常时，会闪退，然后弹出对话框“xxx应用已停止运行。。。”，造成这种现象的原因有两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;发生了未捕获的
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>LOG定位</title>
    <link href="http://joyflyaway.com/2017/01/11/LOG%E5%AE%9A%E4%BD%8D/"/>
    <id>http://joyflyaway.com/2017/01/11/LOG定位/</id>
    <published>2017-01-11T11:52:24.000Z</published>
    <updated>2017-01-11T11:52:24.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android存储系统</title>
    <link href="http://joyflyaway.com/2017/01/11/Android%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F/"/>
    <id>http://joyflyaway.com/2017/01/11/Android存储系统/</id>
    <published>2017-01-11T01:54:36.000Z</published>
    <updated>2017-01-30T04:17:25.000Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">service installd /system/bin/installd</div><div class="line">    <span class="keyword">class</span> main</div><div class="line">    socket installd stream <span class="number">600</span> system system</div></pre></td></tr></table></figure>
<h2 id="Log-分析"><a href="#Log-分析" class="headerlink" title="Log 分析"></a>Log 分析</h2><p>关键字搜索</p>
<ul>
<li>Storage manager</li>
</ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android存储系统&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android双应用原理</title>
    <link href="http://joyflyaway.com/2017/01/10/Android%E5%8F%8C%E5%BA%94%E7%94%A8%E5%8E%9F%E7%90%86/"/>
    <id>http://joyflyaway.com/2017/01/10/Android双应用原理/</id>
    <published>2017-01-10T03:42:27.000Z</published>
    <updated>2017-02-16T09:41:08.000Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --></p>
<h2 id="托管配置"><a href="#托管配置" class="headerlink" title="托管配置"></a>托管配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Android 5.0 提供了用于在企业环境内运行应用的新功能。如果用户已有个人帐户，则设备管理员可启动托管配置进程，向设备添加共存但独立的托管配置文件。与托管配置文件关联的应用与非托管应用一并出现在用户的启动器、最近使用的应用屏幕和通知中。</div><div class="line"></div><div class="line">要启动托管配置进程，请通过 Intent 发送 ACTION_PROVISION_MANAGED_PROFILE。如果调用成功，系统会触发 onProfileProvisioningComplete() 回调。然后您就可以调用 setProfileEnabled() 来启用此托管配置文件。</div><div class="line"></div><div class="line">默认情况下，托管配置文件中只启用了一小部分应用。您可以通过调用 enableSystemApp() 在托管配置文件中安装更多应用。</div><div class="line"></div><div class="line">如果您要开发启动器应用，可以使用新增的 LauncherApps 类获取可为当前用户启动的 Activity 以及任何关联托管配置文件的列表。您的启动器可通过向可绘制图标追加工作徽章，以醒目方式显示托管应用。要检索带徽章的图标，请调用 getUserBadgedIcon()。</div><div class="line"></div><div class="line">要查看如何使用新功能，请参阅此版本中的 BasicManagedProfile 实现示例。</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android中的多用户双应用原理&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android广播流程</title>
    <link href="http://joyflyaway.com/2017/01/09/Android%E5%B9%BF%E6%92%AD%E6%B5%81%E7%A8%8B/"/>
    <id>http://joyflyaway.com/2017/01/09/Android广播流程/</id>
    <published>2017-01-09T07:41:38.000Z</published>
    <updated>2017-01-30T04:17:19.000Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">framework/base/core/java/android/app/ContextImpl.java</div></pre></td></tr></table></figure>
<h2 id="一、发送过程"><a href="#一、发送过程" class="headerlink" title="一、发送过程"></a>一、发送过程</h2><h3 id="1-1-ContextImpl-sendBroadcast"><a href="#1-1-ContextImpl-sendBroadcast" class="headerlink" title="1.1 ContextImpl#sendBroadcast"></a>1.1 ContextImpl#sendBroadcast</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// UID = system，直接调用sendBroadcast方法，会警告，应调用sendBroadcastAsUser   </span></div><div class="line">warnIfCallingFromSystemProcess();</div><div class="line"></div><div class="line"><span class="comment">// 获取所查询URI的MIME类型，如果没有类型则返回null，这里应该是返回null   </span></div><div class="line">String resolvedType = intent.resolveTypeIfNeeded(getContentResolver());</div><div class="line"></div><div class="line"><span class="comment">// 调用ActivityManagerService#broadcastIntent方法</span></div><div class="line">ActivityManagerNative.getDefault().broadcastIntent</div></pre></td></tr></table></figure>
<h3 id="1-2-ActivityManagerService-broadcastIntent"><a href="#1-2-ActivityManagerService-broadcastIntent" class="headerlink" title="1.2 ActivityManagerService#broadcastIntent"></a>1.2 ActivityManagerService#broadcastIntent</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<h2 id="二、注册过程"><a href="#二、注册过程" class="headerlink" title="二、注册过程"></a>二、注册过程</h2><h3 id="2-1-ActivityManagerService-registerReceiver"><a href="#2-1-ActivityManagerService-registerReceiver" class="headerlink" title="2.1 ActivityManagerService#registerReceiver"></a>2.1 ActivityManagerService#registerReceiver</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">/*Keeps track of all IIntentReceivers that have been registered for    broadcasts.Hash keys are the receiver IBinder, hash value is a ReceiverList.*/</span></div><div class="line">mRegisteredReceivers.put(receiver.asBinder(), rl);</div><div class="line">BroadcastFilter bf = <span class="keyword">new</span> BroadcastFilter(filter,  rl, callerPackage,  permission, callingUid, userId);</div><div class="line">rl.add(bf);</div><div class="line">mReceiverResolver.addFilter(bf);</div><div class="line">queue.enqueueParallelBroadcastLocked(r);</div><div class="line">queue.scheduleBroadcastsLocked();</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介绍Android广播的处理流程&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android中的异常处理机制</title>
    <link href="http://joyflyaway.com/2017/01/06/Android%E4%B8%AD%E7%9A%84%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/"/>
    <id>http://joyflyaway.com/2017/01/06/Android中的异常处理机制/</id>
    <published>2017-01-06T08:05:02.000Z</published>
    <updated>2017-01-06T09:24:02.000Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --></p>
<p>Apk第一次启动时,AMS通过socket发出请求，zygote接收消息，处理进程创建请求。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">zygoteInit</span><span class="params">(<span class="keyword">int</span> targetSdkVersion, String[] argv, ClassLoader classLoader)</span></span></div><div class="line">        <span class="keyword">throws</span> ZygoteInit.MethodAndArgsCaller &#123;</div><div class="line">    commonInit();</div><div class="line">    nativeZygoteInit();</div><div class="line">    applicationInit(targetSdkVersion, argv, classLoader);</div><div class="line">&#125;    </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">commonInit</span><span class="params">()</span> </span>&#123;</div><div class="line">    ......</div><div class="line">    <span class="comment">/* 线程默认异常处理handler */</span></div><div class="line">    Thread.setDefaultUncaughtExceptionHandler(<span class="keyword">new</span> UncaughtHandler());</div><div class="line">    ......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>zygote会对新的进程进行一些基础的初始化，包括了默认异常处理。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 当应用内部抛出未被处理的异常而退出时，将会抓取当前log */</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">UncaughtHandler</span> <span class="keyword">implements</span> <span class="title">Thread</span>.<span class="title">UncaughtExceptionHandler</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uncaughtException</span><span class="params">(Thread t, Throwable e)</span> </span>&#123;</div><div class="line">      <span class="comment">// 弹出错误对话框，等待用户选择需要的操作</span></div><div class="line">      ActivityManagerNative.getDefault().handleApplicationCrash(</div><div class="line">              mApplicationObject, <span class="keyword">new</span> ApplicationErrorReport.CrashInfo(e));</div><div class="line"></div><div class="line">      <span class="comment">// 确保进程完全退出</span></div><div class="line">      Process.killProcess(Process.myPid());</div><div class="line">      System.exit(<span class="number">10</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当异常发生后，如果应用没有捕获，则会调用默认UncaughtHandler来处理：<br>APK —&gt; Binder —&gt; AMS    </p>
<ul>
<li>handleApplicationCrash()   </li>
<li>Error Dialog //弹出 error dialog</li>
<li>wait         //等待用户选择</li>
<li>exit         //程序完全退出</li>
</ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Author JOY.&lt;br&gt;
    
    </summary>
    
    
      <category term="Debug" scheme="http://joyflyaway.com/tags/Debug/"/>
    
  </entry>
  
  <entry>
    <title>Java虚拟机(笔记)</title>
    <link href="http://joyflyaway.com/2016/12/26/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    <id>http://joyflyaway.com/2016/12/26/Java虚拟机/</id>
    <published>2016-12-26T07:19:53.000Z</published>
    <updated>2016-12-31T04:41:57.000Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --></p>
<h2 id="Java内存-运行时区域"><a href="#Java内存-运行时区域" class="headerlink" title="Java内存 运行时区域"></a>Java内存 运行时区域</h2><h3 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h3><h3 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h3><h3 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h3><h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">用于存放Class的相关信息，如类名、访问修饰符、常量池、字段描述、方法描述 等。</div></pre></td></tr></table></figure>
<h2 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h2><p>在Java语言中，可作为GC Roots的对象包括下面几种：</p>
<ul>
<li>虚拟机栈（栈帧中的本地变量表）中引用的对象。</li>
<li>方法区中类静态属性引用的对象。</li>
<li>方法区中常量引用的对象。</li>
<li>本地方法栈中JNI（即一般说的Native方法）引用的对象。</li>
</ul>
<h2 id="类文件结构"><a href="#类文件结构" class="headerlink" title="类文件结构"></a>类文件结构</h2><h3 id="常量池"><a href="#常量池" class="headerlink" title="常量池"></a>常量池</h3><p>字面量（Literal）和符号引用（Symbolic References）。 字面量比较接近于Java语言层面的常量概念，如文本字符串、声明为final的常量值等。而符 号引用则属于编译原理方面的概念，包括了下面三类常量：</p>
<ul>
<li>类和接口的全限定名（Fully Qualified Name）</li>
<li>字段的名称和描述符（Descriptor）</li>
<li>方法的名称和描述符</li>
</ul>
<h2 id="字节码指令"><a href="#字节码指令" class="headerlink" title="字节码指令"></a>字节码指令</h2><h3 id="加载和存储指令"><a href="#加载和存储指令" class="headerlink" title="加载和存储指令"></a>加载和存储指令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">加载和存储指令用于将数据在栈帧中的局部变量表和操作数栈之间来回传输</div></pre></td></tr></table></figure>
<h3 id="运算指令"><a href="#运算指令" class="headerlink" title="运算指令"></a>运算指令</h3><h3 id="类型转换指令"><a href="#类型转换指令" class="headerlink" title="类型转换指令"></a>类型转换指令</h3><h3 id="对象创建与访问指令"><a href="#对象创建与访问指令" class="headerlink" title="对象创建与访问指令"></a>对象创建与访问指令</h3><h3 id="操作数栈管理指令"><a href="#操作数栈管理指令" class="headerlink" title="操作数栈管理指令"></a>操作数栈管理指令</h3><h3 id="控制转移指令"><a href="#控制转移指令" class="headerlink" title="控制转移指令"></a>控制转移指令</h3><h3 id="方法调用和返回指令"><a href="#方法调用和返回指令" class="headerlink" title="方法调用和返回指令"></a>方法调用和返回指令</h3><h3 id="异常处理指令"><a href="#异常处理指令" class="headerlink" title="异常处理指令"></a>异常处理指令</h3><h3 id="同步指令"><a href="#同步指令" class="headerlink" title="同步指令"></a>同步指令</h3><h2 id="类加载的时机"><a href="#类加载的时机" class="headerlink" title="类加载的时机"></a>类加载的时机</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">类从被加载到虚拟机内存中开始，到卸载出内存为止，它的整个生命周期包括：加载（Loading）、</div><div class="line">验证（Verification）、准备（Preparation）、解析（Resolution）、</div><div class="line">初始化 （Initialization）、使用（Using）和卸载（Unloading）7个阶段。   </div><div class="line">其中验证、准备、解析3个 部分统称为连接（Linking）</div></pre></td></tr></table></figure>
<p>虚拟机规范则 是严格规定了有且只有5种情况必须立即对类进行“初始化”（而加载、验证、准备自然需要 在此之前开始）:</p>
<p>1）遇到new、getstatic、putstatic或invokestatic这4条字节码指令时，如果类没有进行过初 始化，则需要先触发其初始化。生成这4条指令的最常见的Java代码场景是：使用new关键字 实例化对象的时候、读取或设置一个类的静态字段（被final修饰、已在编译期把结果放入常 量池的静态字段除外）的时候，以及调用一个类的静态方法的时候。</p>
<p>2）使用java.lang.reflect包的方法对类进行反射调用的时候，如果类没有进行过初始化， 则需要先触发其初始化。</p>
<p>3）当初始化一个类的时候，如果发现其父类还没有进行过初始化，则需要先触发其父 类的初始化。</p>
<p>4）当虚拟机启动时，用户需要指定一个要执行的主类（包含main（）方法的那个 类），虚拟机会先初始化这个主类。</p>
<p>5）当使用JDK1.7的动态语言支持时，如果一个java.lang.invoke.MethodHandle实例最后 的解析结果REF_getStatic、REF_putStatic、REF_invokeStatic的方法句柄，并且这个方法句柄 所对应的类没有进行过初始化，则需要先触发其初始化。</p>
<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><ul>
<li>文件格式验证</li>
<li>元数据验证</li>
<li>字节码验证</li>
<li>符号引用验证</li>
</ul>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，这些变量所使用的内存 都将在方法区中进行分配。</p>
<h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程</p>
<ul>
<li>类或接口的解析</li>
<li>字段解析</li>
<li>类方法解析</li>
</ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对《深入理解java虚拟机》一书所做的笔记。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>dumpsys参数介绍</title>
    <link href="http://joyflyaway.com/2016/12/21/dumpsys%E5%8F%82%E6%95%B0%E4%BB%8B%E7%BB%8D/"/>
    <id>http://joyflyaway.com/2016/12/21/dumpsys参数介绍/</id>
    <published>2016-12-21T09:38:21.000Z</published>
    <updated>2017-01-30T04:17:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>dumpsys -l<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">列出所有服务名</div></pre></td></tr></table></figure></p>
<p>dumpsys gfxinfo [pid]<br>dumpsys meminfo [pid]</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;dumpsys -l&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pr
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>职位选择</title>
    <link href="http://joyflyaway.com/2016/11/03/%E8%81%8C%E4%BD%8D%E9%80%89%E6%8B%A9/"/>
    <id>http://joyflyaway.com/2016/11/03/职位选择/</id>
    <published>2016-11-03T04:24:30.000Z</published>
    <updated>2016-11-03T04:25:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>薪资组成：<br>月薪，年薪，股票，其他<br>公司：<br>职位，发展机会</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;薪资组成：&lt;br&gt;月薪，年薪，股票，其他&lt;br&gt;公司：&lt;br&gt;职位，发展机会&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>对团队的一些理解</title>
    <link href="http://joyflyaway.com/2016/10/31/%E5%AF%B9%E5%9B%A2%E9%98%9F%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3/"/>
    <id>http://joyflyaway.com/2016/10/31/对团队的一些理解/</id>
    <published>2016-10-31T09:13:16.000Z</published>
    <updated>2016-11-01T02:14:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>好的团队拥有的特质：<br>信任<br>互助<br>共进退<br>保持沟通，互相了解对方进度、问题<br>让每个成员都感觉到自己很重要</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好的团队拥有的特质：&lt;br&gt;信任&lt;br&gt;互助&lt;br&gt;共进退&lt;br&gt;保持沟通，互相了解对方进度、问题&lt;br&gt;让每个成员都感觉到自己很重要&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
</feed>
